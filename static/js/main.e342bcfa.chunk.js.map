{"version":3,"sources":["components/Form.js","components/ErrorMsg.js","components/LimitDays.js","components/City.js","components/DateTitle.js","helpFunctions/convertations.js","components/IconWeather.js","components/Results.js","components/pages/Home.js","components/pages/Details.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","className","onSubmit","e","preventDefault","form","document","querySelector","city","elements","value","trim","newCity","classList","remove","add","action","noValidate","type","name","placeholder","id","required","ErrorMsg","errorMsg","errorText","charAt","toUpperCase","slice","LimitDays","limits","val","handleChange","target","parentNode","toggle","changeLimit","radioBtns","map","item","i","key","checked","onChange","City","country","DateTitle","children","date","dateFormate","d","Date","getDay","getMonth","getDate","timeFormate","toLocaleTimeString","hour","minute","IconWeather","addClass","alt","src","icon","Results","weather","forecast","list","limit","temp_weather","to","dt","Math","round","temp","day","description","length","Home","appState","load","Details","data","useParams","dayForcast","JSON","parse","localStorage","getItem","feels_like","pressure","humidity","min","max","sunrise","sunset","App","useState","setForecast","setAppState","setCity","daytemp","setDaytemp","setLimit","useEffect","savedForcast","cityName","fetch","then","response","json","result","cod","setItem","stringify","message","catch","error","path","newLimit","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.e342bcfa.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Form(props) {\r\n    function handleSubmitForm (e) {\r\n        e.preventDefault();\r\n        const form = document.querySelector('.needs-validation'),\r\n            city = form.elements[\"city\"].value;\r\n        if (!city.trim()){\r\n            form.classList.add('was-validated');\r\n        } else {\r\n            props.newCity(city);\r\n            form.classList.remove('was-validated');\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"row justify-content-center\">\r\n            <form className=\" col-11 col-sm-10 col-md-7 col-lg-5 mb-3 needs-validation\" onSubmit={handleSubmitForm} action=\"\" noValidate>\r\n                <div className=\"input-group-lg\">\r\n                    <input type=\"text\"\r\n                           name=\"city\"\r\n                           className=\"form-control\"\r\n                           placeholder=\"Search...\"\r\n                           id=\"search\" required/>\r\n                    <div className=\"invalid-feedback\">Please fill out this field.</div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nfunction ErrorMsg(props) {\r\n        const errorMsg = props.errorMsg.trim();\r\n        const errorText = `${errorMsg.charAt(0).toUpperCase()}${errorMsg.slice(1)}`;\r\n        return (\r\n            <div className=\"error text-center\">{errorText}</div>\r\n        );\r\n}\r\n\r\nexport default ErrorMsg;","import React from 'react';\r\n\r\nfunction LimitDays(props) {\r\n    const limits = {\r\n        name: 'limit',\r\n        val: [3, 5, 7]\r\n    }\r\n    function handleChange(e) {\r\n        e.target.parentNode.classList.toggle('active');\r\n        props.changeLimit(e.target.value * 1);\r\n    }\r\n    const radioBtns = limits.val.map((item, i) => {\r\n        return (\r\n            <label key={i} className={`custom-control-label custom-control-inline ${props.limits === item ? 'active' : ''}`}>\r\n                <input type=\"radio\"\r\n                       className=\"custom-control-input\"\r\n                       checked={props.limits === item}\r\n                       id={`${limits.name}${item}`}\r\n                       name={limits.name}\r\n                       value={item}\r\n                onChange={handleChange}/>\r\n                <span className=\"\">{item}</span>\r\n            </label>\r\n        );\r\n    });\r\n    return (\r\n        <div className=\"col limit mb-4 text-center\">\r\n            <span className=\"mr-3\">For:</span>\r\n            {radioBtns}<span className=\"ml-1\">days</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LimitDays;","import React from 'react';\r\n\r\nfunction City(props) {\r\n    return (\r\n         ( props.city) ? (\r\n            <div className=\"row justify-content-center flex-column\">\r\n                <div className=\"col city mb-3 text-center\">{props.city}, {props.country}</div>\r\n            </div>\r\n        ) : (<></>)\r\n    );\r\n}\r\n\r\nexport default City;","import React from \"react\";\r\n\r\nfunction DateTitle(props) {\r\n    return <div className=\"date text-center\">{props.children ? `${props.children} `: ``}{props.date}</div>\r\n}\r\nexport default DateTitle;","export const dateFormate = (date) => {\r\n    const d = new Date(date*1000),\r\n        months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\r\n        weekday = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n    return `${weekday[d.getDay()]}, ${ months[d.getMonth()]} ${d.getDate()}`\r\n}\r\nexport const timeFormate = (date) => {\r\n    const d = new Date(date*1000);\r\n    return d.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n}","import React from \"react\";\r\n\r\nfunction IconWeather(props) {\r\n    return (\r\n        <div className={props.addClass? `icon ${props.addClass}` : `icon`}>\r\n            <img className=\"img\" alt=\"icon\"\r\n                 src={`http://openweathermap.org/img/w/${props.icon}.png`} />\r\n        </div>\r\n    );\r\n}\r\nexport default IconWeather;","import React from 'react';\r\nimport LimitDays from \"./LimitDays\";\r\nimport City from \"./City\";\r\nimport DateTitle from \"./DateTitle\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {dateFormate} from \"../helpFunctions/convertations\";\r\nimport IconWeather from \"./IconWeather\";\r\n\r\nfunction Results(props) {\r\n    const weather = props.forecast.list\r\n                    .slice(0, props.limit)\r\n                    .map((item,i) => {\r\n                    const temp_weather = item.weather[0];\r\n                        return (\r\n                            <li key={i} className=\"col-10 col-sm-6 col-md-4 col-lg-3\">\r\n                                <Link className=\"result d-block text-decoration-none\" to={`/weather-react/details/${i}`}>\r\n                                    <DateTitle date={dateFormate(item.dt)}/>\r\n                                    <div className=\"weather d-flex justify-content-around align-items-center\">\r\n                                        <IconWeather icon={temp_weather.icon}/>\r\n                                        <div className=\"temp\">{Math.round(item.temp.day)}&deg;C</div>\r\n                                    </div>\r\n                                    <div className=\"description text-center\">{temp_weather.description}</div>\r\n                                    <div className=\"show-details text-center mt-2\">Show details &raquo;</div>\r\n                                </Link>\r\n                            </li>\r\n                        );\r\n                    });\r\n    if (weather && weather.length) {\r\n        return (\r\n            <>\r\n                <City city={props.forecast.city.name} country={props.forecast.city.country}/>\r\n                <LimitDays limits={props.limit} changeLimit={props.changeLimit}/>\r\n                <ul className=\"row results list-unstyled justify-content-center m-0\">{weather}</ul>\r\n            </>\r\n            );\r\n    }\r\n    return (<></>);\r\n}\r\n\r\nexport default Results;","import React from 'react';\r\nimport Form from \"../Form\";\r\nimport ErrorMsg from \"../ErrorMsg\";\r\nimport Results from \"../Results\";\r\n\r\nfunction Home(props) {\r\n    return (\r\n        <>\r\n            <Form newCity={props.newCity} />\r\n            { props.appState.errorMsg ? <ErrorMsg errorMsg={props.appState.errorMsg}/> : (\r\n                props.appState.load ? <Results forecast={props.forecast}\r\n                                         limit={props.limit}\r\n                                         changeLimit={props.changeLimit}/> :\r\n                    <div className=\"text-center\">Loading...</div>)\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport City from \"../City\";\r\nimport {dateFormate, timeFormate} from \"../../helpFunctions/convertations\";\r\nimport DateTitle from \"../DateTitle\";\r\nimport IconWeather from \"../IconWeather\";\r\n\r\nfunction Details(props) {\r\n    const { id } = useParams();\r\n    let data;\r\n    if (props.forecast.list) {\r\n        data = props.forecast;\r\n    } else {\r\n        data = JSON.parse(localStorage.getItem(\"forecast\"));\r\n    }\r\n    const dayForcast = data.list[id],\r\n        weather = dayForcast.weather[0];\r\n    return (\r\n        <div className=\"details-container\">\r\n            <City city={data.city.name} country={data.city.country} />\r\n            <div className=\"row justify-content-center\">\r\n                <div className=\"details col-11 col-sm-10 col-md-8 col-lg-6\">\r\n                    <DateTitle date={dateFormate(dayForcast.dt)}>{timeFormate(dayForcast.dt)}</DateTitle>\r\n                    <div className=\"weather row justify-content-around align-items-center text-center text-sm-left\">\r\n                        <IconWeather icon={weather.icon} addClass=\"col-6 col-sm-4\"/>\r\n                        <div className=\"temp col-6 col-sm-4\">\r\n                            <div className=\"temp-val\">{Math.round(dayForcast.temp.day)}&deg;C</div>\r\n                            <div>{weather.description}</div>\r\n                        </div>\r\n                        <div className=\"temp-feels col col-sm-4\">\r\n                            <div className=\"row justify-content-center justify-content-sm-start\">\r\n                                <div className=\"col-auto col-sm-12 mb-2 mb-sm-0\">Feels like: {Math.round(dayForcast.feels_like.day)}&deg;C</div>\r\n                                <div className=\"col-auto col-sm-12 mb-2 mb-sm-0\">Pressure: {dayForcast.pressure} hPa</div>\r\n                                <div className=\"col-auto col-sm-12 mb-2 mb-sm-0\">Humidity: {dayForcast.humidity} %</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row text-center mt-3\">\r\n                        <div className=\"col-6 col-sm-3 mb-2\">\r\n                            <div>Min. temp</div>\r\n                            <div>{Math.round(dayForcast.temp.min)}&deg;C</div>\r\n                        </div>\r\n                        <div className=\"col-6 col-sm-3 mb-2\">\r\n                            <div>Max. temp</div>\r\n                            <div>{Math.round(dayForcast.temp.max)}&deg;C</div>\r\n                        </div>\r\n                        <div className=\"col-6 col-sm-3 mb-2\">\r\n                            <div>Sunrise</div>\r\n                            <div>{timeFormate(dayForcast.sunrise)}</div>\r\n                        </div>\r\n                        <div className=\"col-6 col-sm-3 mb-2\">\r\n                            <div>Sunset</div>\r\n                            <div>{timeFormate(dayForcast.sunset)}</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row justify-content-end\">\r\n                        <Link className=\"col-auto\" to=\"/weather-react/\">&laquo; Back to results</Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Details;","import React, { useState, useEffect } from 'react';\r\nimport {Route, Switch, BrowserRouter as Router} from \"react-router-dom\";\r\nimport './App.css';\r\nimport Home from \"./components/pages/Home\";\r\nimport Details from \"./components/pages/Details\";\r\n\r\nconst baseUrl = 'https://api.openweathermap.org/data/2.5/forecast/daily?cnt=7&units=metric&APPID=0867a13b59c398d1edd05d49f440e4f0&q=';\r\n\r\nfunction App() {\r\n    const [forecast, setForecast] = useState({});\r\n    const [appState, setAppState] = useState({errorMsg: '', load: false});\r\n    const [city, setCity] = useState('');\r\n    const [daytemp, setDaytemp] = useState(0);\r\n    const [limit, setLimit] = useState(3);\r\n\r\n    useEffect(() => {\r\n        const limit = JSON.parse(localStorage.getItem(\"limit\"));\r\n        if (limit) setLimit(limit);\r\n        const savedForcast = JSON.parse(localStorage.getItem(\"forecast\"));\r\n        const cityName = (savedForcast && savedForcast.city.name) ? savedForcast.city.name : 'Krakow';\r\n        setCity(cityName);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (!city) return;\r\n        setAppState({errorMsg: '', load: false});\r\n        fetch(`${baseUrl}${city}`)\r\n            .then((response) => response.json())\r\n            .then((result) => {\r\n                if (result.cod === \"200\") {\r\n                    setForecast({...result});\r\n                    setAppState({errorMsg: '', load: true});\r\n                    const day = result.list[0];\r\n                    setDaytemp(day.temp.day);\r\n                    localStorage.setItem(\"forecast\", JSON.stringify(result));\r\n                } else {\r\n                    setAppState({errorMsg: result.message, load: true});\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                setAppState({errorMsg: error.message, load: true});\r\n            });\r\n    }, [city]);\r\n\r\n    function newCity(data) {\r\n        setCity(data);\r\n    }\r\n    function changeLimit(newLimit) {\r\n        setLimit(newLimit);\r\n        localStorage.setItem(\"limit\", newLimit);\r\n    }\r\n  return (\r\n    <div className={daytemp > 20 ? 'App summer' : 'App'}>\r\n        <div className=\"container position-relative pb-4 pt-4\">\r\n            <h1 className=\"h3 title text-center pb-4\">Weather Forcast</h1>\r\n            <Router>\r\n                <Switch>\r\n                    <Route path=\"/weather-react/details/:id\">\r\n                        <Details forecast={forecast}/>\r\n                    </Route>\r\n                    <Route path=\"/weather-react/\">\r\n                        <Home appState={appState}\r\n                              forecast={forecast}\r\n                              newCity={newCity}\r\n                              limit={limit}\r\n                              changeLimit={changeLimit} />\r\n                    </Route>\r\n                </Switch>\r\n            </Router>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}